
import * as path from "jsr:@std/path"
import { stringify, parse } from "jsr:@std/csv"

const csvPath = path.join("assets", "myg2p-dict-mlcts.csv")

// read CSV file
const parsedCsv = csvPath
    |> Deno.readTextFileSync
    |> parse

// extract single consonant from a row
function extractSingleConsonant(row: string[]): string[]
    const burmeseSyllables = row[3].split("|")
    const mlctsSyllables = row[4].split("|")
    
    mlctsSyllables
    |> .map((x: string, i: number) => [x, i])
    |> .map(([x, i]) => [x, burmeseSyllables[i]])

// make the first letter uppercase
function capitalizeFirstLetter(s: string): string
    return s.charAt(0).toUpperCase() + s.slice(1)

// extract consonant and medial diacritic
function extractConsonant(b: string, m: string,
        vowelSymbol: string, vowel: string): (string|undefined)[]
    if m == vowelSymbol
        return [vowel, undefined]

    m = m.replace(vowelSymbol, "")

    if b.includes("ျွှ")
        m.slice(1, -2)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Hyw"]
    else if b.includes("ြွှ")
        m.slice(1, -2)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Hrw"]
    else if b.includes("ွှ")
        m.slice(1, -1)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Hw"]
    else if b.includes("ျှ")
        m.slice(1, -1)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Hy"]
    else if b.includes("ြှ")
        m.slice(1, -1)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Ry"]
    else if b.includes("ျွ")
        m.slice(0, -2)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Hw"]
    else if b.includes("ြွ")
        m.slice(0, -2)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Rw"]
    else if b.includes("ှ")
        m.slice(1)
            |> capitalizeFirstLetter
            |> function (c) do [c, "H"]
    else if b.includes("ျ")
        m.slice(0, -1)
            |> capitalizeFirstLetter
            |> function (c) do [c, "Y"]
    else if b.includes("ြ")
        m.slice(0, -1)
            |> capitalizeFirstLetter
            |> function (c) do [c, "R"]
    else if b.includes("ွ")
        m.slice(0, -1)
            |> capitalizeFirstLetter
            |> function (c) do [c, "W"]
    else
        m
            |> capitalizeFirstLetter
            |> function (c) do [c, undefined]

// convert row into input format
function convertRow(inputClass: string, row: string[], vowelSymbol: string,
        vowel: string, virama?: string, tone?: string): string[]
    const [m, b] = row

    . inputClass
    . b,
    . m
    . ...extractConsonant(b, m, vowelSymbol, vowel)
    . vowel
    . virama
    . tone

function extractSyllable(entries: string[][], vowel: string,
        filterFn: (inp: string) => boolean = (() => true)): [string, string]
    entries
    |> .flatMap(extractSingleConsonant)
    |> .filter(([x, ]: [string,number]) => x.endsWith(vowel))
    |> .filter(([x, ]: [string,number]) => filterFn(x))
    |> .reduce((acc, cur) => { ...acc, [cur[0]]: cur[1] }, {})
    |> Object.entries
    |> .map(([k, v]) => [k, v.replace(/ /g, "")])

const outputPath = path.join("tests", "t_tokenizer_inputs_single.csv")
const outputFile = Deno.openSync(outputPath, { write: true, create: true })
const textEncoder = new TextEncoder()

const header = "class,input_burmese,input_mlcts,consonant,medial_diacritic,vowel,virama,tone\n"
outputFile.write(textEncoder.encode(header))

console.log "[*] Generating consonant inputs"
parsedCsv
    |> function(ent: string[][]) do extractSyllable(ent, "a.")
    |> .map((row) => convertRow("consonant", row, "a.", "A", undefined, "Creaky"))
    |> stringify
    |> textEncoder.encode |> outputFile.writeSync

console.log "[*] Generating vowel 'a' inputs"
parsedCsv
    |> function(ent: string[][]) do extractSyllable(ent, "a")
    |> .map((row) => convertRow("vowel_a", row, "a", "A", undefined, undefined))
    |> stringify
    |> textEncoder.encode |> outputFile.writeSync

console.log "[*] Generating vowel 'a:' inputs"
parsedCsv
    |> function (ent: string[][]) do extractSyllable(ent, "a:", (inp) => !inp.includes("yauka"))
    |> .map((row) => convertRow("vowel_a_high", row, "a:", "A", undefined, "High"))
    |> stringify
    |> textEncoder.encode |> outputFile.writeSync

outputFile.close(); console.log "[*] Done generating tokenizer inputs."
